library(roxygen2)
roxygenise(".")
?vulnerabilite
anciennes_nouvelles_regions = read.table(
"~/4-Margaux/automatisation_biblio/final/departements-anciennes_nouvelles_regions.csv",
sep = ";",
header = TRUE,
quote = ""
)
save(anciennes_nouvelles_regions, "data/anciennes_nouvelles_regions.rda")
save(anciennes_nouvelles_regions, file = "data/anciennes_nouvelles_regions.rda")
roxygenise(".")
roxygenise(".")
roxygenise(".")
pkgload::dev_help('anciennes_nouvelles_regions')
roxygenise(".")
pkgload::dev_help('statuts_inpn')
# definir_id_inpn : Nettoyage du nom de l'espèce et récupération de l'ID INPN
definir_id_inpn <- function(espece) {
# chargement des packages
if (!require(httr) || !require(jsonlite)) {
stop("Please install the following packages : httr, jsonlite")
}
# Suppression des espaces en trop
espece.clean <- gsub("(^ +)|( +$)", "", espece)
# Construction de URL pour faire la requête
target <- gsub(" +", "%20", espece.clean)
call <- paste(
"https://taxref.mnhn.fr/api/taxa/fuzzyMatch?term=",
target,
sep = ""
)
# Extraction de l'identifiant INPN via la REST API
res <- GET(url = call)
res.content <- content(res, "text", encoding = "UTF-8")
res.json <- fromJSON(res.content, flatten = TRUE)
taxa <- res.json$`_embedded`$taxa
# Identifier les sous-espèces, variétés et forme pour ne pas les prendre en compte
ssp_var_f <- grepl("(</i>subsp\\.<i>)|(</i>var\\.<i>)|(</i>f\\.<i>)", taxa$referenceNameHtml) |
grepl("nom\\. illeg\\.", taxa$authority)
# Identifier les lignes associées uniquement à l'espèce
i <- grepl(espece, taxa$scientificName) & !ssp_var_f
# Extraire l'identifiant des données
id <- NULL
if (sum(i) == 1) {
id <- taxa[i, "referenceId"]
} else {
ref_id <- taxa$referenceId[i]
if (length(unique(ref_id)) == 1) {
j <- taxa$id == ref_id[1] & i
if (sum(j) == 1) {
id <- taxa[j, "referenceId"]
}
}
}
nv = NA
if(!is.na(taxa$frenchVernacularName[1])){
nv = unlist(strsplit(taxa$frenchVernacularName, ", "))[1]
}
return(
list(
"id" = id,
"nv" = nv
)
)
}
id = definir_id_inpn("Helianthemum ledifolium")
id
id$id
typeof(id$id)
library(roxygen2)
roxygenise()
roxygenise(".")
rm(list = c("definir_id_inpn"))
roxygenise(".")
source("~/4-Margaux/automatisation_biblio/package/autoSearchINPN/R/fonctions.R", echo=TRUE)
View(calculer_ratios)
id = definir_id_inpn("Helianthemum ledifolium")
id
departement = 'aude'
statuts = recuperer_statuts(id$id, departement)
load("~/4-Margaux/automatisation_biblio/package/autoSearchINPN/data/anciennes_nouvelles_regions.rda")
statuts = recuperer_statuts(id$id, departement)
as.matrix(statuts)
extraction_INPN = function(espece, departement){
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
res = c(
id$id,
espece,
id$nv,
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
"dep/reg",
"dep/nat",
"reg/nat",
statuts$col_names
)
return(res)
}
as.matrix(res)
res = extraction_INPN("Helianthemum ledifolium", "aude")
espece = ""Helianthemum ledifolium""
espece = "Helianthemum ledifolium"
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
res = c(
id$id,
espece,
id$nv,
statuts$statusCode
)
extraction_INPN = function(espece, departement){
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio)
statuts$col_names
extraction_INPN = function(espece, departement){
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
return(res)
}
res = extraction_INPN("Helianthemum ledifolium", "aude")
as.matrix(res)
extraction_INPN = function(espece, departement){
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
# compilation des données
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
# calcul de l'enjeu
index_lr_nat = grep("Liste.rouge.nationale...france.metropolitaine", names(res))
index_lr_reg = grep("Liste.rouge.régionale", names(res))
lr_nat = res[index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res[index_lr_reg], NA)
reg_nat = table_finale$reg.nat[i]
res$enjeux = enjeu(lr_nat, lr_reg, reg_nat)
return(res)
}
res = extraction_INPN("Helianthemum ledifolium", "aude")
names(res)
extraction_INPN = function(espece, departement){
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
# compilation des données
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
# calcul de l'enjeu
index_lr_nat = grep("Liste.rouge.nationale...france.metropolitaine", names(res))
index_lr_reg = grep("Liste.rouge.régionale", names(res))
lr_nat = res[index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res[index_lr_reg], NA)
reg_nat = res["reg/nat"]
res$enjeux = enjeu(lr_nat, lr_reg, reg_nat)
return(res)
}
res = extraction_INPN("Helianthemum ledifolium", "aude")
espece
departement
id = definir_id_inpn(espece)
statuts = recuperer_statuts(id$id, departement)
ratio = calculer_ratios(id$id, departement)
# compilation des données
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
# calcul de l'enjeu
index_lr_nat = grep("Liste.rouge.nationale...france.metropolitaine", names(res))
index_lr_reg = grep("Liste.rouge.régionale", names(res))
lr_nat = res[index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res[index_lr_reg], NA)
reg_nat = res["reg/nat"]
lr_nat
index_lr_nat
names(res)
# calcul de l'enjeu
index_lr_nat = grep("Liste rouge nationale france metropolitaine", names(res))
index_lr_reg = grep("Liste rouge régionale", names(res))
lr_nat = res[index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res[index_lr_reg], NA)
reg_nat = res["reg/nat"]
res$enjeux = enjeu(lr_nat, lr_reg, reg_nat)
lr_nat
lr_reg
reg_nat
enjeu(lr_nat, lr_reg, reg_nat)
vulnerabilite(lr_nat, lr_reg)
v = vulnerabilite(lr_nat, lr_reg)
typeof(v)
vulnerabilite(lr_nat, lr_reg) * reg_nat
reg_nat
res = data.frame(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
res
colnames(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
ratio
list(id$id, ratio)
list(id$id, unlist(ratio))
# compilation des données
res = c(
id$id,
espece,
id$nv,
unlist(ratio),
statuts$statusCode
)
names(res) = c(
"taxref",
"espece",
"nom vernaculaires",
names(ratio),
statuts$col_names
)
res
res.df = data.frame(res)
res.df
res.df = data.frame(t(res))
res.df
res.df$taxref
res.df = data.frame(t(res))
res.df$taxref = as.numeric(res.df$taxref)
res.df$dep.reg = as.numeric(res.df$dep.reg)
res.df$dep.nat = as.numeric(res.df$dep.nat)
res.df$reg.nat = as.numeric(res.df$reg.nat)
# calcul de l'enjeu
index_lr_nat = grep("Liste.rouge.nationale.france.metropolitaine", colnames(res.df))
index_lr_reg = grep("Liste.rouge.régionale", colnames(res.df))
lr_nat = res.df[index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res.df[index_lr_reg], NA)
reg_nat = res.df$reg.nat
res.df$enjeux = enjeu(lr_nat, lr_reg, reg_nat)
lr_nat
lr_nat[1]
lr_reg
vulnerabilite(lr_nat, lr_reg)
vulnerabilite(lr_nat, lr_reg)
lr_nat = res.df[index_lr_nat,]
lr_reg = ifelse(length(index_lr_reg) == 1, res.df[index_lr_reg,], NA)
vulnerabilite(lr_nat, lr_reg)
lr_nat
lr_nat = res.df[,index_lr_nat]
lr_reg = ifelse(length(index_lr_reg) == 1, res.df[,index_lr_reg], NA)
lr_nat
lr_reg
reg_nat = res.df$reg.nat
res.df$enjeux = enjeu(lr_nat, lr_reg, reg_nat)
View(res.df)
res.df
roxygenize(".")
rm(list = c("calculer_ratios", "definir_id_inpn", "enjeu", "recuperer_statuts", "statuts_inpn", "vulnerabilite"))
roxygenize(".")
rm(list = c("extraction_INPN"))
roxygenize(".")
roxygenize(".")
getwd()
install.packages("available")
library(available)
available::available("rParviflora")
install.packages("fastmap")
library(available)
available::available("rParviflora")
roxygen2::roxygenise(".")
roxygen2::roxygenise(".")
tools::showNonASCIIfile("R/fonctions.R")
tools::showNonASCIIfile("R/fonctions.R")
tools::showNonASCIIfile("R/fonctions.R")
tools::showNonASCIIfile("R/fonctions.R")
tools::showNonASCIIfile("R/data.R")
tools::showNonASCIIfile("R/data.R")
tools::showNonASCIIfile("R/data.R")
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
roxygen2::roxygenise('.')
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::build()
"autoSearchINPN" %in% rownames(installed.packages())
?remove.packages()
rmove.packages(autoSearchINPN)
remove.packages(autoSearchINPN)
?remotes::remote_package_name()
remove.packages("autoSearchINPN")
devtools::document()
devtools::check()
devtools::build()
devtools::build()
class(anciennes_nouvelles_regions)
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
?anciennes_nouvelles_regions
devtools::check()
devtools::check()
data("anciennes_nouvelles_regions", package = "rParviflora")
View(anciennes_nouvelles_regions)
rm(anciennes_nouvelles_regions)
library(rParviflora)
anciennes_nouvelles_regions$num_dep
detach("rParviflora")
detach("package:rParviflora", unload = TRUE)
devtools::build()
devtools::install()
library(rParviflora)
toto = recuperer_statuts(20, "aude")
detach("package:rParviflora", unload = TRUE)
devtools::check()
devtools::build()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
?rParviflora
??rParviflora
rParviflora
devtools::check()
devtools::check()
devtools::build()
